// Code generated by MockGen. DO NOT EDIT.
// Source: file.go
//
// Generated by this command:
//
//	mockgen -source=file.go -destination=./mock/file/file.go
//

// Package mock_uploader is a generated GoMock package.
package mock_uploader

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
	isgomock struct{}
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockFileRepository) DeleteFile(ctx context.Context, bucketName, objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, bucketName, objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockFileRepositoryMockRecorder) DeleteFile(ctx, bucketName, objectName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockFileRepository)(nil).DeleteFile), ctx, bucketName, objectName)
}

// UploadPublicFile mocks base method.
func (m *MockFileRepository) UploadPublicFile(ctx context.Context, bucketName, objectName, contentType string, file io.Reader, userMetadata map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadPublicFile", ctx, bucketName, objectName, contentType, file, userMetadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadPublicFile indicates an expected call of UploadPublicFile.
func (mr *MockFileRepositoryMockRecorder) UploadPublicFile(ctx, bucketName, objectName, contentType, file, userMetadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadPublicFile", reflect.TypeOf((*MockFileRepository)(nil).UploadPublicFile), ctx, bucketName, objectName, contentType, file, userMetadata)
}
